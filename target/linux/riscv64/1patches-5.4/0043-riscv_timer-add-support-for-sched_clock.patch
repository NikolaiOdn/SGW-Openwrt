From 301fb06d5db71372c86ce1f35b282ec8677f0527 Mon Sep 17 00:00:00 2001
From: "Wesley W. Terpstra" <wesley@sifive.com>
Date: Wed, 14 Mar 2018 23:56:54 -0700
Subject: [PATCH 43/49] riscv_timer: add support for sched_clock

---
 arch/riscv/Kconfig                | 2 ++
 arch/riscv/include/asm/timex.h    | 6 +++---
 drivers/clocksource/riscv_timer.c | 9 ++++++++-
 3 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index 65886a6..578f966 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -10,6 +10,7 @@ config RISCV
 	select OF_IRQ
 	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
 	select ARCH_WANT_FRAME_POINTERS
+	select ARCH_SUPPORTS_INT128
 	select CLONE_BACKWARDS
 	select COMMON_CLK
 	select GENERIC_CLOCKEVENTS
@@ -18,6 +19,7 @@ config RISCV
 	select GENERIC_PCI_IOMAP
 	select GENERIC_STRNCPY_FROM_USER
 	select GENERIC_STRNLEN_USER
+	select GENERIC_SCHED_CLOCK
 	select GENERIC_SMP_IDLE_THREAD
 	select GENERIC_ATOMIC64 if !64BIT || !RISCV_ISA_A
 	select ARCH_WANT_OPTIONAL_GPIOLIB
diff --git a/arch/riscv/include/asm/timex.h b/arch/riscv/include/asm/timex.h
index 2f26989..12efecfd 100644
--- a/arch/riscv/include/asm/timex.h
+++ b/arch/riscv/include/asm/timex.h
@@ -18,7 +18,7 @@
 
 typedef unsigned long cycles_t;
 
-static inline cycles_t get_cycles_inline(void)
+static inline notrace cycles_t get_cycles_inline(void)
 {
 	cycles_t n;
 
@@ -30,12 +30,12 @@ static inline cycles_t get_cycles_inline(void)
 #define get_cycles get_cycles_inline
 
 #ifdef CONFIG_64BIT
-static inline uint64_t get_cycles64(void)
+static inline notrace uint64_t get_cycles64(void)
 {
         return get_cycles();
 }
 #else
-static inline uint64_t get_cycles64(void)
+static inline notrace uint64_t get_cycles64(void)
 {
 	u32 lo, hi, tmp;
 	__asm__ __volatile__ (
diff --git a/drivers/clocksource/riscv_timer.c b/drivers/clocksource/riscv_timer.c
index 38867bd..59a734c 100644
--- a/drivers/clocksource/riscv_timer.c
+++ b/drivers/clocksource/riscv_timer.c
@@ -16,6 +16,7 @@
 #include <linux/clockchips.h>
 #include <linux/delay.h>
 #include <linux/timer_riscv.h>
+#include <linux/sched_clock.h>
 #include <asm/sbi.h>
 
 #define MINDELTA 100
@@ -94,7 +95,12 @@ static int hart_of_timer(struct device_node *dev)
 	return hart;
 }
 
-static int timer_riscv_init_dt(struct device_node *n)
+static u64 notrace timer_riscv_sched_read(void)
+{
+	return get_cycles64();
+}
+
+static int __init timer_riscv_init_dt(struct device_node *n)
 {
 	int cpu_id = hart_of_timer(n);
 	struct clock_event_device *ce = per_cpu_ptr(&riscv_clock_event, cpu_id);
@@ -102,6 +108,7 @@ static int timer_riscv_init_dt(struct device_node *n)
 
 	if (cpu_id == smp_processor_id()) {
 		clocksource_register_hz(cs, riscv_timebase);
+		sched_clock_register(timer_riscv_sched_read, 64, riscv_timebase);
 
 		ce->cpumask = cpumask_of(cpu_id);
 		clockevents_config_and_register(ce, riscv_timebase, MINDELTA, MAXDELTA);
-- 
2.7.4

